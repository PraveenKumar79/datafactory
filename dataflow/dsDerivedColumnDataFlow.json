{
	"name": "dsDerivedColumnDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsSIPMain",
						"type": "DatasetReference"
					},
					"name": "srcSIPMainCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsDestination",
						"type": "DatasetReference"
					},
					"name": "snkDestination"
				},
				{
					"dataset": {
						"referenceName": "dsDestination",
						"type": "DatasetReference"
					},
					"name": "snkRedemption"
				},
				{
					"dataset": {
						"referenceName": "dsDestination",
						"type": "DatasetReference"
					},
					"name": "snkPurchase"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "splitDividendTypeTransactions"
				},
				{
					"name": "Redemption"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SlNo as string,",
				"          AccountName as string,",
				"          FolioNumber as string,",
				"          TransactionType as string,",
				"          SchemeName as string,",
				"          Price as string,",
				"          Amount as string,",
				"          Units as string,",
				"          TransactionDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcSIPMainCSV",
				"splitDividendTypeTransactions@DividendPayOut derive(CreatedDate = currentDate()) ~> derivedColumn1",
				"srcSIPMainCSV split(TransactionType=='DividendPayOut',",
				"     disjoint: true) ~> splitDividendTypeTransactions@(DividendPayOut, PurchaseOrRedemptionStream)",
				"splitDividendTypeTransactions@PurchaseOrRedemptionStream split(TransactionType =='Redemption',",
				"     disjoint: true) ~> Redemption@(Redemption, Purchase)",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> snkDestination",
				"Redemption@Redemption sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('Redemption_', toString(currentDate())))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> snkRedemption",
				"Redemption@Purchase sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('PurchasesTill_', toString(currentDate())))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> snkPurchase"
			]
		}
	}
}